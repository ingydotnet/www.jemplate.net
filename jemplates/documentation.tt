[% TAGS <* *> >> %]
<* WRAPPER 'bootstrap-wrapper.tt' *>
<ul id="documentation.tt/index">
  <li><a href="#documentation.tt/NAME">NAME</a></li>
  <li><a href="#documentation.tt/SYNOPSIS">SYNOPSIS</a></li>
  <li><a href="#documentation.tt/DESCRIPTION">DESCRIPTION</a></li>
  <li><a href="#documentation.tt/HOWTO">HOWTO</a></li>
  <li><a href="#documentation.tt/PUBLIC-API">PUBLIC API</a></li>
  <li><a href="#documentation.tt/AJAX-AND-JSON-METHODS">AJAX AND JSON METHODS</a></li>
  <li><a href="#documentation.tt/CURRENT-SUPPORT">CURRENT SUPPORT</a></li>
  <li><a href="#documentation.tt/BROWSER-SUPPORT">BROWSER SUPPORT</a></li>
  <li><a href="#documentation.tt/DEVELOPMENT">DEVELOPMENT</a></li>
  <li><a href="#documentation.tt/CREDIT">CREDIT</a></li>
  <li><a href="#documentation.tt/AUTHORS">AUTHORS</a></li>
  <li><a href="#documentation.tt/COPYRIGHT-AND-LICENSE">COPYRIGHT AND LICENSE</a></li>
</ul>

<h2 id="documentation.tt/NAME">NAME</h2>

<p>Jemplate - JavaScript Templating with Template Toolkit</p>

<h2 id="documentation.tt/SYNOPSIS">SYNOPSIS</h2>

<pre><code class="prettyprint">    var data = Ajax.get(&#39;url/data.json&#39;);
    var elem = document.getElementById(&#39;some-div&#39;);
    elem.innerHTML = Jemplate.process(&#39;my-template.html&#39;, data);</code></pre>

<p>or:</p>

<pre><code class="prettyprint">    var data = Ajax.get(&#39;url/data.json&#39;);
    var elem = document.getElementById(&#39;some-div&#39;);
    Jemplate.process(&#39;my-template.html&#39;, data, elem);</code></pre>

<p>or simply:</p>

<pre><code class="prettyprint">    Jemplate.process(&#39;my-template.html&#39;, &#39;url/data.json&#39;, &#39;#some-div&#39;);</code></pre>

<p>or, with jQuery.js:</p>

<pre><code class="prettyprint">    jQuery.getJSON(&quot;url/data.json&quot;, function(data) {
        Jemplate.process(&#39;my-template.html&#39;, data, &#39;#some-div&#39;);
    });</code></pre>

<p>From the commandline:</p>

<pre><code class="prettyprint">    jemplate --runtime --compile path/to/jemplate/directory/ &gt; jemplate.js</code></pre>

<h2 id="documentation.tt/DESCRIPTION">DESCRIPTION</h2>

<p>Jemplate is a templating framework for JavaScript that is built over Perl&#39;s Template Toolkit (TT2).</p>

<p>Jemplate parses TT2 templates using the TT2 Perl framework, but with a twist. Instead of compiling the templates into Perl code, it compiles them into JavaScript.</p>

<p>Jemplate then provides a JavaScript runtime module for processing the template code. Presto, we have full featured JavaScript templating language!</p>

<p>Combined with JSON and xmlHttpRequest, Jemplate provides a really simple and powerful way to do Ajax stuff.</p>

<h2 id="documentation.tt/HOWTO">HOWTO</h2>

<p>Jemplate comes with a command line tool call <code class="prettyprint">jemplate</code> that you use to precompile your templates into a JavaScript file. For example if you have a template directory called <code class="prettyprint">templates</code> that contains:</p>

<pre><code class="prettyprint">    &gt; ls templates/
    body.html
    footer.html
    header.html</code></pre>

<p>You might run this command:</p>

<pre><code class="prettyprint">    &gt; jemplate --compile template/* &gt; js/jemplates.js</code></pre>

<p>This will compile all the templates into one JavaScript file.</p>

<p>You also need to generate the Jemplate runtime.</p>

<pre><code class="prettyprint">    &gt; jemplate --runtime &gt; js/Jemplate.js</code></pre>

<p>Now all you need to do is include these two files in your HTML:</p>

<pre><code class="prettyprint">    &lt;script src=&quot;js/Jemplate.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;js/jemplates.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre>

<p>Now you have Jemplate support for these templates in your HTML document.</p>

<h2 id="documentation.tt/PUBLIC-API">PUBLIC API</h2>

<p>The Jemplate.js JavaScript runtime module has the following API method:</p>

<dl>

<dt id="documentation.tt/Jemplate.process-template-name-data-target">Jemplate.process(template-name, data, target);</dt>
<dd>

<p>The <code class="prettyprint">template-name</code> is a string like <code class="prettyprint">&#39;body.html&#39;</code> that is the name of the top level template that you wish to process.</p>

<p>The optional <code class="prettyprint">data</code> specifies the data object to be used by the templates. It can be an object, a function or a url. If it is an object, it is used directly. If it is a function, the function is called and the returned object is used. If it is a url, an asynchronous &lt;Ajax.get&gt; is performed. The result is expected to be a JSON string, which gets turned into an object.</p>

<p>The optional <code class="prettyprint">target</code> can be an HTMLElement reference, a function or a string beginning with a <code class="prettyprint">#</code> char. If the target is omitted, the template result is returned. If it is a function, the function is called with the result. If it is a string, the string is used as an id to find an HTMLElement.</p>

<p>If an HTMLElement is used (by id or directly) then the innerHTML property is set to the template processing result.</p>

</dd>
</dl>

<p>The Jemplate.pm Perl module has the following public class methods, although you won&#39;t likely need to use them directly. Normally, you just use the <code class="prettyprint">jemplate</code> command line tool.</p>

<dl>

<dt id="documentation.tt/Jemplate-compile_template_files-template_file_paths">Jemplate-&gt;compile_template_files(@template_file_paths);</dt>
<dd>

<p>Take a list of template file paths and compile them into a module of functions. Returns the text of the module.</p>

</dd>
<dt id="documentation.tt/Jemplate-compile_template_content-content-template_name">Jemplate-&gt;compile_template_content($content, $template_name);</dt>
<dd>

<p>Compile one template whose content is in memory. You must provide a unique template name. Returns the JavaScript text result of the compilation.</p>

</dd>
<dt id="documentation.tt/Jemplate-compile_module-module_path-template_file_paths">Jemplate-&gt;compile_module($module_path, \@template_file_paths);</dt>
<dd>

<p>Similar to `compile_template_files`, but prints to result to the $module_path. Returns 1 if successful, undef if error.</p>

</dd>
<dt id="documentation.tt/Jemplate-compile_module_cached-module_path-template_file_paths">Jemplate-&gt;compile_module_cached($module_path, \@template_file_paths);</dt>
<dd>

<p>Similar to `compile_module`, but only compiles if one of the templates is newer than the module. Returns 1 if successful compile, 0 if no compile due to cache, undef if error.</p>

</dd>
</dl>

<h2 id="documentation.tt/AJAX-AND-JSON-METHODS">AJAX AND JSON METHODS</h2>

<p>Jemplate comes with builtin Ajax and JSON support.</p>

<dl>

<dt id="documentation.tt/Ajax.get-url-callback">Ajax.get(url, [callback]);</dt>
<dd>

<p>Does a GET operation to the url.</p>

<p>If a callback is provided, the operation is asynchronous, and the data is passed to the callback. Otherwise, the operation is synchronous and the data is returned.</p>

</dd>
<dt id="documentation.tt/Ajax.post-url-data-callback">Ajax.post(url, data, [callback]);</dt>
<dd>

<p>Does a POST operation to the url.</p>

<p>Same callback rules as <code class="prettyprint">get</code> apply.</p>

</dd>
<dt id="documentation.tt/JSON.stringify-object">JSON.stringify(object);</dt>
<dd>

<p>Return the JSON serialization of an object.</p>

</dd>
<dt id="documentation.tt/JSON.parse-jsonString">JSON.parse(jsonString);</dt>
<dd>

<p>Turns a JSON string into an object and returns the object.</p>

</dd>
</dl>

<h2 id="documentation.tt/CURRENT-SUPPORT">CURRENT SUPPORT</h2>

<p>The goal of Jemplate is to support all of the Template Toolkit features that can possibly be supported.</p>

<p>Jemplate now supports almost all the TT directives, including:</p>

<pre><code class="prettyprint">  * Plain text
  * [% [GET] variable %]
  * [% CALL variable %]
  * [% [SET] variable = value %]
  * [% DEFAULT variable = value ... %]
  * [% INCLUDE [arguments] %]
  * [% PROCESS [arguments] %]
  * [% BLOCK name %]
  * [% FILTER filter %] text... [% END %]
  * [% JAVASCRIPT %] code... [% END %]
  * [% WRAPPER template [variable = value ...] %]
  * [% IF condition %]
  * [% ELSIF condition %]
  * [% ELSE %]
  * [% SWITCH variable %]
  * [% CASE [{value|DEFAULT}] %]
  * [% FOR x = y %]
  * [% WHILE expression %]
  * [% RETURN %]
  * [% THROW type message %]
  * [% STOP %]
  * [% NEXT %]
  * [% LAST %]
  * [% CLEAR %]
  * [%# this is a comment %]
  * [% MACRO name(param1, param2) BLOCK %] ... [% END %]</code></pre>

<p>ALL of the string virtual functions are supported.</p>

<p>ALL of the array virtual functions are supported:</p>

<p>ALL of the hash virtual functions are supported:</p>

<p>MANY of the standard filters are implemented.</p>

<p>The remaining features will be added very soon. See the DESIGN document in the distro for a list of all features and their progress.</p>

<h2 id="documentation.tt/BROWSER-SUPPORT">BROWSER SUPPORT</h2>

<p>Tested successfully in:</p>

<pre><code class="prettyprint">    * Firefox Mac/Win32/Linux
    * IE 6.0
    * Safari
    * Opera
    * Konqueror</code></pre>

<p>All tests run 100% successful in the above browsers.</p>

<h2 id="documentation.tt/DEVELOPMENT">DEVELOPMENT</h2>

<p>The bleeding edge code is available via Git at git://github.com/ingydotnet/jemplate.git</p>

<p>Jemplate development is being discussed at irc://irc.freenode.net/#jemplate</p>

<p>If you want a committer bit, just ask ingy on the irc channel.</p>

<h2 id="documentation.tt/CREDIT">CREDIT</h2>

<p>This module is only possible because of Andy Wardley&#39;s mighty Template Toolkit. Thanks Andy. I will gladly give you half of any beers I receive for this work. (As long as you are in the same room when I&#39;m drinking them ;)</p>

<h2 id="documentation.tt/AUTHORS">AUTHORS</h2>

<p>Ingy d&ouml;t Net &lt;ingy@cpan.org&gt;</p>

<p>(Note: I had to list myself first so that this line would go into META.yml)</p>

<p>Jemplate is truly a community authored project:</p>

<p>Ingy d&ouml;t Net &lt;ingy@cpan.org&gt;</p>

<p>Tatsuhiko Miyagawa &lt;miyagawa@bulknews.net&gt;</p>

<p>Yann Kerherve &lt;yannk@cpan.org&gt;</p>

<p>David Davis &lt;xantus@xantus.org&gt;</p>

<p>Cory Bennett &lt;coryb@corybennett.org&gt;</p>

<p>Cees Hek &lt;ceeshek@gmail.com&gt;</p>

<p>Christian Hansen</p>

<p>David A. Coffey &lt;dacoffey@cogsmith.com&gt;</p>

<p>Robert Krimen &lt;robertkrimen@gmail.com&gt;</p>

<p>Nickolay Platonov &lt;nickolay8@gmail.com&gt;</p>

<h2 id="documentation.tt/COPYRIGHT-AND-LICENSE">COPYRIGHT AND LICENSE</h2>

<p>Copyright (c) 2006-2014. Ingy d&ouml;t Net.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See http://www.perl.com/perl/misc/Artistic.html</p>
<* END *>
