/*
   This JavaScript code was generated by Jemplate, the JavaScript
   Template Toolkit. Any changes made to this file will be lost the next
   time the templates are compiled.

   Copyright 2006-2014 - Ingy d√∂t Net - All rights reserved.
*/

var Jemplate;
if (typeof(exports) == 'object') {
    Jemplate = require("jemplate").Jemplate;
}

if (typeof(Jemplate) == 'undefined')
    throw('Jemplate.js must be loaded before any Jemplate template files');

Jemplate.templateMap['bootstrap-wrapper.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
//line 1 "bootstrap-wrapper.tt"
output += context.process('nav.tt');
output += '\n<div class="container">\n	';
//line 3 "bootstrap-wrapper.tt"
output += stash.get('content');
output += '\n  <hr>\n  <footer>\n    <p>&copy; ';
//line 6 "bootstrap-wrapper.tt"
output += stash.get('company');
output += ' 2015</p>\n  </footer>\n</div>\n<script src="https://cdn.jsdelivr.net/gh/google/code-prettify/loader/run_prettify.js"></script>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['documentation.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '\n';
//line 272 "documentation.tt"

// WRAPPER
output += (function() {
    var output = '';
output += '\n<ul id="documentation.tt/index">\n  <li><a href="#documentation.tt/NAME">NAME</a></li>\n  <li><a href="#documentation.tt/SYNOPSIS">SYNOPSIS</a></li>\n  <li><a href="#documentation.tt/DESCRIPTION">DESCRIPTION</a></li>\n  <li><a href="#documentation.tt/HOWTO">HOWTO</a></li>\n  <li><a href="#documentation.tt/PUBLIC-API">PUBLIC API</a></li>\n  <li><a href="#documentation.tt/AJAX-AND-JSON-METHODS">AJAX AND JSON METHODS</a></li>\n  <li><a href="#documentation.tt/CURRENT-SUPPORT">CURRENT SUPPORT</a></li>\n  <li><a href="#documentation.tt/BROWSER-SUPPORT">BROWSER SUPPORT</a></li>\n  <li><a href="#documentation.tt/DEVELOPMENT">DEVELOPMENT</a></li>\n  <li><a href="#documentation.tt/CREDIT">CREDIT</a></li>\n  <li><a href="#documentation.tt/AUTHORS">AUTHORS</a></li>\n  <li><a href="#documentation.tt/COPYRIGHT-AND-LICENSE">COPYRIGHT AND LICENSE</a></li>\n</ul>\n\n<h2 id="documentation.tt/NAME">NAME</h2>\n\n<p>Jemplate - JavaScript Templating with Template Toolkit</p>\n\n<h2 id="documentation.tt/SYNOPSIS">SYNOPSIS</h2>\n\n<pre><code class="prettyprint">    var data = Ajax.get(&#39;url/data.json&#39;);\n    var elem = document.getElementById(&#39;some-div&#39;);\n    elem.innerHTML = Jemplate.process(&#39;my-template.html&#39;, data);</code></pre>\n\n<p>or:</p>\n\n<pre><code class="prettyprint">    var data = Ajax.get(&#39;url/data.json&#39;);\n    var elem = document.getElementById(&#39;some-div&#39;);\n    Jemplate.process(&#39;my-template.html&#39;, data, elem);</code></pre>\n\n<p>or simply:</p>\n\n<pre><code class="prettyprint">    Jemplate.process(&#39;my-template.html&#39;, &#39;url/data.json&#39;, &#39;#some-div&#39;);</code></pre>\n\n<p>or, with jQuery.js:</p>\n\n<pre><code class="prettyprint">    jQuery.getJSON(&quot;url/data.json&quot;, function(data) {\n        Jemplate.process(&#39;my-template.html&#39;, data, &#39;#some-div&#39;);\n    });</code></pre>\n\n<p>From the commandline:</p>\n\n<pre><code class="prettyprint">    jemplate --runtime --compile path/to/jemplate/directory/ &gt; jemplate.js</code></pre>\n\n<h2 id="documentation.tt/DESCRIPTION">DESCRIPTION</h2>\n\n<p>Jemplate is a templating framework for JavaScript that is built over Perl&#39;s Template Toolkit (TT2).</p>\n\n<p>Jemplate parses TT2 templates using the TT2 Perl framework, but with a twist. Instead of compiling the templates into Perl code, it compiles them into JavaScript.</p>\n\n<p>Jemplate then provides a JavaScript runtime module for processing the template code. Presto, we have full featured JavaScript templating language!</p>\n\n<p>Combined with JSON and xmlHttpRequest, Jemplate provides a really simple and powerful way to do Ajax stuff.</p>\n\n<h2 id="documentation.tt/HOWTO">HOWTO</h2>\n\n<p>Jemplate comes with a command line tool call <code class="prettyprint">jemplate</code> that you use to precompile your templates into a JavaScript file. For example if you have a template directory called <code class="prettyprint">templates</code> that contains:</p>\n\n<pre><code class="prettyprint">    &gt; ls templates/\n    body.html\n    footer.html\n    header.html</code></pre>\n\n<p>You might run this command:</p>\n\n<pre><code class="prettyprint">    &gt; jemplate --compile template/* &gt; js/jemplates.js</code></pre>\n\n<p>This will compile all the templates into one JavaScript file.</p>\n\n<p>You also need to generate the Jemplate runtime.</p>\n\n<pre><code class="prettyprint">    &gt; jemplate --runtime &gt; js/Jemplate.js</code></pre>\n\n<p>Now all you need to do is include these two files in your HTML:</p>\n\n<pre><code class="prettyprint">    &lt;script src=&quot;js/Jemplate.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;js/jemplates.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre>\n\n<p>Now you have Jemplate support for these templates in your HTML document.</p>\n\n<h2 id="documentation.tt/PUBLIC-API">PUBLIC API</h2>\n\n<p>The Jemplate.js JavaScript runtime module has the following API method:</p>\n\n<dl>\n\n<dt id="documentation.tt/Jemplate.process-template-name-data-target">Jemplate.process(template-name, data, target);</dt>\n<dd>\n\n<p>The <code class="prettyprint">template-name</code> is a string like <code class="prettyprint">&#39;body.html&#39;</code> that is the name of the top level template that you wish to process.</p>\n\n<p>The optional <code class="prettyprint">data</code> specifies the data object to be used by the templates. It can be an object, a function or a url. If it is an object, it is used directly. If it is a function, the function is called and the returned object is used. If it is a url, an asynchronous &lt;Ajax.get&gt; is performed. The result is expected to be a JSON string, which gets turned into an object.</p>\n\n<p>The optional <code class="prettyprint">target</code> can be an HTMLElement reference, a function or a string beginning with a <code class="prettyprint">#</code> char. If the target is omitted, the template result is returned. If it is a function, the function is called with the result. If it is a string, the string is used as an id to find an HTMLElement.</p>\n\n<p>If an HTMLElement is used (by id or directly) then the innerHTML property is set to the template processing result.</p>\n\n</dd>\n</dl>\n\n<p>The Jemplate.pm Perl module has the following public class methods, although you won&#39;t likely need to use them directly. Normally, you just use the <code class="prettyprint">jemplate</code> command line tool.</p>\n\n<dl>\n\n<dt id="documentation.tt/Jemplate-compile_template_files-template_file_paths">Jemplate-&gt;compile_template_files(@template_file_paths);</dt>\n<dd>\n\n<p>Take a list of template file paths and compile them into a module of functions. Returns the text of the module.</p>\n\n</dd>\n<dt id="documentation.tt/Jemplate-compile_template_content-content-template_name">Jemplate-&gt;compile_template_content($content, $template_name);</dt>\n<dd>\n\n<p>Compile one template whose content is in memory. You must provide a unique template name. Returns the JavaScript text result of the compilation.</p>\n\n</dd>\n<dt id="documentation.tt/Jemplate-compile_module-module_path-template_file_paths">Jemplate-&gt;compile_module($module_path, \\@template_file_paths);</dt>\n<dd>\n\n<p>Similar to `compile_template_files`, but prints to result to the $module_path. Returns 1 if successful, undef if error.</p>\n\n</dd>\n<dt id="documentation.tt/Jemplate-compile_module_cached-module_path-template_file_paths">Jemplate-&gt;compile_module_cached($module_path, \\@template_file_paths);</dt>\n<dd>\n\n<p>Similar to `compile_module`, but only compiles if one of the templates is newer than the module. Returns 1 if successful compile, 0 if no compile due to cache, undef if error.</p>\n\n</dd>\n</dl>\n\n<h2 id="documentation.tt/AJAX-AND-JSON-METHODS">AJAX AND JSON METHODS</h2>\n\n<p>Jemplate comes with builtin Ajax and JSON support.</p>\n\n<dl>\n\n<dt id="documentation.tt/Ajax.get-url-callback">Ajax.get(url, [callback]);</dt>\n<dd>\n\n<p>Does a GET operation to the url.</p>\n\n<p>If a callback is provided, the operation is asynchronous, and the data is passed to the callback. Otherwise, the operation is synchronous and the data is returned.</p>\n\n</dd>\n<dt id="documentation.tt/Ajax.post-url-data-callback">Ajax.post(url, data, [callback]);</dt>\n<dd>\n\n<p>Does a POST operation to the url.</p>\n\n<p>Same callback rules as <code class="prettyprint">get</code> apply.</p>\n\n</dd>\n<dt id="documentation.tt/JSON.stringify-object">JSON.stringify(object);</dt>\n<dd>\n\n<p>Return the JSON serialization of an object.</p>\n\n</dd>\n<dt id="documentation.tt/JSON.parse-jsonString">JSON.parse(jsonString);</dt>\n<dd>\n\n<p>Turns a JSON string into an object and returns the object.</p>\n\n</dd>\n</dl>\n\n<h2 id="documentation.tt/CURRENT-SUPPORT">CURRENT SUPPORT</h2>\n\n<p>The goal of Jemplate is to support all of the Template Toolkit features that can possibly be supported.</p>\n\n<p>Jemplate now supports almost all the TT directives, including:</p>\n\n<pre><code class="prettyprint">  * Plain text\n  * [% [GET] variable %]\n  * [% CALL variable %]\n  * [% [SET] variable = value %]\n  * [% DEFAULT variable = value ... %]\n  * [% INCLUDE [arguments] %]\n  * [% PROCESS [arguments] %]\n  * [% BLOCK name %]\n  * [% FILTER filter %] text... [% END %]\n  * [% JAVASCRIPT %] code... [% END %]\n  * [% WRAPPER template [variable = value ...] %]\n  * [% IF condition %]\n  * [% ELSIF condition %]\n  * [% ELSE %]\n  * [% SWITCH variable %]\n  * [% CASE [{value|DEFAULT}] %]\n  * [% FOR x = y %]\n  * [% WHILE expression %]\n  * [% RETURN %]\n  * [% THROW type message %]\n  * [% STOP %]\n  * [% NEXT %]\n  * [% LAST %]\n  * [% CLEAR %]\n  * [%# this is a comment %]\n  * [% MACRO name(param1, param2) BLOCK %] ... [% END %]</code></pre>\n\n<p>ALL of the string virtual functions are supported.</p>\n\n<p>ALL of the array virtual functions are supported:</p>\n\n<p>ALL of the hash virtual functions are supported:</p>\n\n<p>MANY of the standard filters are implemented.</p>\n\n<p>The remaining features will be added very soon. See the DESIGN document in the distro for a list of all features and their progress.</p>\n\n<h2 id="documentation.tt/BROWSER-SUPPORT">BROWSER SUPPORT</h2>\n\n<p>Tested successfully in:</p>\n\n<pre><code class="prettyprint">    * Firefox Mac/Win32/Linux\n    * IE 6.0\n    * Safari\n    * Opera\n    * Konqueror</code></pre>\n\n<p>All tests run 100% successful in the above browsers.</p>\n\n<h2 id="documentation.tt/DEVELOPMENT">DEVELOPMENT</h2>\n\n<p>The bleeding edge code is available via Git at git://github.com/ingydotnet/jemplate.git</p>\n\n<p>Jemplate development is being discussed at irc://irc.freenode.net/#jemplate</p>\n\n<p>If you want a committer bit, just ask ingy on the irc channel.</p>\n\n<h2 id="documentation.tt/CREDIT">CREDIT</h2>\n\n<p>This module is only possible because of Andy Wardley&#39;s mighty Template Toolkit. Thanks Andy. I will gladly give you half of any beers I receive for this work. (As long as you are in the same room when I&#39;m drinking them ;)</p>\n\n<h2 id="documentation.tt/AUTHORS">AUTHORS</h2>\n\n<p>Ingy d&ouml;t Net &lt;ingy@cpan.org&gt;</p>\n\n<p>(Note: I had to list myself first so that this line would go into META.yml)</p>\n\n<p>Jemplate is truly a community authored project:</p>\n\n<p>Ingy d&ouml;t Net &lt;ingy@cpan.org&gt;</p>\n\n<p>Tatsuhiko Miyagawa &lt;miyagawa@bulknews.net&gt;</p>\n\n<p>Yann Kerherve &lt;yannk@cpan.org&gt;</p>\n\n<p>David Davis &lt;xantus@xantus.org&gt;</p>\n\n<p>Cory Bennett &lt;coryb@corybennett.org&gt;</p>\n\n<p>Cees Hek &lt;ceeshek@gmail.com&gt;</p>\n\n<p>Christian Hansen</p>\n\n<p>David A. Coffey &lt;dacoffey@cogsmith.com&gt;</p>\n\n<p>Robert Krimen &lt;robertkrimen@gmail.com&gt;</p>\n\n<p>Nickolay Platonov &lt;nickolay8@gmail.com&gt;</p>\n\n<h2 id="documentation.tt/COPYRIGHT-AND-LICENSE">COPYRIGHT AND LICENSE</h2>\n\n<p>Copyright (c) 2006-2014. Ingy d&ouml;t Net.</p>\n\n<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>\n\n<p>See http://www.perl.com/perl/misc/Artistic.html</p>\n';;
    return context.include('bootstrap-wrapper.tt', { 'content': output });
})();

output += '\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['examples.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
//line 48 "examples.tt"

// WRAPPER
output += (function() {
    var output = '';
output += '\n';

output += '\n\n<fieldset id="examples.tt/hello-world">\n	<legend>Hello World</legend>\n	';
//line 17 "examples.tt"
output += context.include('code', { 'prefix': 'Template', 'data': { 'file': 'hello.tt'  } });
output += '\n	';
//line 18 "examples.tt"
output += context.include('code', { 'prefix': 'JavaScript', 'data': { 'block': 'hello-js'  } });
output += '\n	';
//line 19 "examples.tt"

// WRAPPER
output += (function() {
    var output = '';
output += '<div id="hello"></div>';;
    return context.include('code', { 'prefix': 'Contents of div id="hello"', 'data': { 'block': 'hello'  }, 'suffix': 'Rendered output:', 'content': output });
})();

output += '\n	<script id="hello-js">Jemplate.process(\'hello.tt\',{}, \'#hello\');</script>\n\n	<p class="lead">Watch for changes and re-render. Naive one-way binding.</p>\n	';
//line 23 "examples.tt"

// WRAPPER
output += (function() {
    var output = '';
output += 'Say hello to: <input type="text" placeholder="my little friend" onInput="$(\'#hello\').jemplate(\'hello.tt\',{ name:$(this).val() }); fixup();" />';;
    return context.include('code', { 'content': output });
})();

output += '\n</fieldset>\n\n<br/><br/>\n\n<fieldset id="examples.tt/kittys"><legend>Flickr JSONP Example</legend>\n	<p class="lead">Sometimes a developer needs to output about 12 pictures of kitty cats. It happens.</p>\n	';
//line 30 "examples.tt"
output += context.include('code', { 'prefix': 'Template', 'data': { 'file': 'kittys.tt'  } });
output += '\n	';
//line 31 "examples.tt"
output += context.include('code', { 'prefix': 'JavaScript', 'data': { 'block': 'kittys-js'  } });
output += '\n	';
//line 32 "examples.tt"

// WRAPPER
output += (function() {
    var output = '';
output += '<div id="flickr"></div>';;
    return context.include('code', { 'prefix': 'Contents of div id="flickr"', 'data': { 'block': 'flickr'  }, 'suffix': 'Rendered output:', 'content': output });
})();

output += '\n\n<script id="kittys-js">\n	$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?", { tags: "kitten", format: "json" },\n		function(flickr_data) {\n			 $(\'#flickr\').jemplate(\'kittys.tt\', flickr_data); fixup();\n		}\n	);\n</script>\n</fieldset>\n\n<br/><br/>\n\n<fieldset><legend>Moar Examples!</legend>\n<p class="lead">See the <a href="https://github.com/ingydotnet/jemplate/tree/master/eg">repository examples</a> and tests for more details.</p>\n</fieldset>\n';;
    return context.include('bootstrap-wrapper.tt', { 'content': output });
})();

output += '\n<script>\nfunction fixup() {\n	$(\'code[data-file]\').each(function(idx,elm) {\n		var $elm = $(elm);\n		$.get(\'jemplates/\'+$elm.data(\'file\'), function(result) {\n			$elm.html(Jemplate.Filter.prototype.filters.html(result));\n		});\n	});\n	$(\'code[data-block]\').each(function(idx,elm) {\n		var $elm = $(elm);\n		var sel = \'#\'+$elm.data(\'block\');\n		var contents = $(sel).html() || $(sel).text();\n		$elm.html(Jemplate.Filter.prototype.filters.html(contents).replace(/fixup.+;/,\'\'));\n	});\n};\nfixup();\n</script>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['code'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '\n	<pre class="prettyprint"><strong>';
//line 3 "examples.tt"
output += stash.get('prefix');
output += '</strong>\n	<code ';
//line 4 "examples.tt"

// FOREACH 
(function() {
    var list = stash.get(['data', 0, 'pairs', 0]);
    list = new Jemplate.Iterator(list);
    var retval = list.get_first();
    var value = retval[0];
    var done = retval[1];
    var oldloop;
    try { oldloop = stash.get('loop') } finally {}
    stash.set('loop', list);
    try {
        while (! done) {
            stash.data['d'] = value;
output += 'data-';
//line 4 "examples.tt"
output += stash.get(['d', 0, 'key', 0]);
output += '="';
//line 4 "examples.tt"
output += stash.get(['d', 0, 'value', 0]);
output += '" ';;
            retval = list.get_next();
            value = retval[0];
            done = retval[1];
        }
    }
    catch(e) {
        throw(context.set_error(e, output));
    }
    stash.set('loop', oldloop);
})();

output += '>';
//line 4 "examples.tt"

// FILTER
output += (function() {
    var output = '';

output += stash.get(['content', 0, 'replace', [ 'fixup.+;', '' ]]);

    return context.filter(output, 'html', []);
})();

output += '</code>\n	</pre>\n	';
//line 12 "examples.tt"
if (stash.get('suffix')) {
output += '\n	<blockquote><strong>';
//line 7 "examples.tt"
output += stash.get('suffix');
output += '</strong>\n		';
//line 8 "examples.tt"
output += stash.get('content');
output += '\n	</blockquote>\n	';
}
else {
output += '\n		';
//line 11 "examples.tt"
output += stash.get('content');
output += '\n	';
}

output += '\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['hello.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '<p class="bg-info">Hello ';
//line 1 "hello.tt"

// FILTER
output += (function() {
    var output = '';

output += stash.get('name') || 'World';

    return context.filter(output, 'html', []);
})();

output += '!</p>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['home.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
//line 18 "home.tt"

// WRAPPER
output += (function() {
    var output = '';
output += '\n  ';
//line 2 "home.tt"
output += context.process('jumbotron.tt');
output += '\n  <div class="row">\n    <div class="col-md-4">\n      <h2>Versatile</h2>\n      <p>With or without jQuery. Client or server. Asynchronous or synchronous. Want to use Backbone? No problem. Jemplate fits with your platform and workflow, not the other way round.</p>\n    </div>\n    <div class="col-md-4">\n      <h2>Compatible</h2>\n      <p>Got JavaScript? Then you can use Jemplate. No tricks, shims, polyfills, or hidden fields. Works with <a href="http://microsoft.com/ie">the worst</a> browsers, modern <a href="https://www.mozilla.org/en-US/firefox/products/">evergreen</a> <a href="https://www.google.com/chrome/">browsers</a>, and anything in-between. Anywhere fine JavaScript is available.</p>\n   </div>\n    <div class="col-md-4">\n      <h2>Familiar</h2>\n      <p>If you know <a href="http://www.template-toolkit.org/">Template Toolkit</a>, you know Jemplate. Wrappers, includes, filters and vmethods. They\'re all available in Jemplate.</p>\n      <p>Those without prior Template Toolkit experience will find its syntax friendly and familiar.</p>\n    </div>\n  </div>\n';;
    return context.include('bootstrap-wrapper.tt', { 'content': output });
})();

output += '\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['jumbotron.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '<div class="jumbotron">\n  <div class="container">\n		<img src="img/jemplate.png" class="img-responsive" />\n			<p>JavaScript Templating is the best way to turn AJAX/JSON data into HTML. <strong>Jemplate</strong> is the best way to do JavaScript Templating.</p>\n			<p><strong>Jemplate</strong> beats other JavaScript Templating frameworks hands down for the following reasons:</p>\n			<ul>\n			<li>Jemplate is a complete port of the popular <a href="http://www.template-toolkit.org/">Template Toolkit</a> framework. This means it is very full featured indeed.</li>\n			<li>Templates are precompiled (one time, on the server) as JavaScript functions. There is no JavaScript runtime penalty of compiling templates.</li>\n			<li>Templates are <strong>not</strong> stored in your HTML. No silly tricks, like putting template code in hidden textareas.</li>\n			<li>A browser downloads your templates once and caches them. Just like any other JavaScript code.</li>\n			</ul>\n			<p>This site is generated by Jemplate. View Source to see for yourself.</p>\n    <p><a class="btn btn-primary btn-lg" href="#documentation.tt" role="button">Learn more &raquo;</a></p>\n  </div>\n</div>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['kittys.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '\n<style> .stretch { width: 100%; height: auto; max-height: 100%; } </style>\n<div class="row">\n';
//line 13 "kittys.tt"

// FOREACH 
(function() {
    var list = stash.get('items');
    list = new Jemplate.Iterator(list);
    var retval = list.get_first();
    var value = retval[0];
    var done = retval[1];
    var oldloop;
    try { oldloop = stash.get('loop') } finally {}
    stash.set('loop', list);
    try {
        while (! done) {
            stash.data['kitty'] = value;
//line 5 "kittys.tt"
if (stash.get(['loop', 0, 'index', 0]) == 12) {
break;
}


output += '	<div class="col-md-2">\n		<a href="';
//line 7 "kittys.tt"
output += stash.get(['kitty', 0, 'link', 0]);
output += '">\n			<div style="width: 240px; height: 240px; overflow:hidden;">\n						<img src="';
//line 9 "kittys.tt"
output += stash.get(['kitty', 0, 'media', 0, 'm', 0]);
output += '" alt="';
//line 9 "kittys.tt"

// FILTER
output += (function() {
    var output = '';

output += stash.get(['kitty', 0, 'title', 0, 'replace', [ '#.+', '' ]]);

    return context.filter(output, 'html', []);
})();

output += '" class="img-circle stretch">\n			</div>\n		</a>\n	</div>\n';;
            retval = list.get_next();
            value = retval[0];
            done = retval[1];
        }
    }
    catch(e) {
        throw(context.set_error(e, output));
    }
    stash.set('loop', oldloop);
})();

output += '\n</div>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

Jemplate.templateMap['nav.tt'] = function(context) {
    if (! context) throw('Jemplate function called without context\n');
    var stash = context.stash;
    var output = '';

    try {
output += '<nav class="navbar navbar-default navbar-inverse">\n  <div class="container-fluid">\n		<div class="navbar-header">\n			<a class="navbar-brand" href="#/">[<span style="color: #3facd7;">&#37;</span>] Jemplate</a>\n		</div>\n    <!-- Collect the nav links, forms, and other content for toggling -->\n      <ul class="nav navbar-nav">\n          ';
//line 10 "nav.tt"

// FOREACH 
(function() {
    var list = stash.get('navbar');
    list = new Jemplate.Iterator(list);
    var retval = list.get_first();
    var value = retval[0];
    var done = retval[1];
    var oldloop;
    try { oldloop = stash.get('loop') } finally {}
    stash.set('loop', list);
    try {
        while (! done) {
            stash.data['item'] = value;
output += '\n          <li ';
//line 9 "nav.tt"
if (stash.get(['item', 0, 'url', 0, 'match', [ stash.get('jemplate') ]])) {
output += 'class="active"';
}

output += '><a href="';
//line 9 "nav.tt"
output += stash.get(['item', 0, 'url', 0]);
output += '">';
//line 9 "nav.tt"
if (stash.get(['item', 0, 'icon', 0])) {
output += '<span class="glyphicon glyphicon-';
//line 9 "nav.tt"
output += stash.get(['item', 0, 'icon', 0]);
output += '"></span>';
}

output += ' ';
//line 9 "nav.tt"

// FILTER
output += (function() {
    var output = '';

output += stash.get(['item', 0, 'text', 0]);

    return context.filter(output, 'ucfirst', []);
})();

output += '</a></li>\n          ';;
            retval = list.get_next();
            value = retval[0];
            done = retval[1];
        }
    }
    catch(e) {
        throw(context.set_error(e, output));
    }
    stash.set('loop', oldloop);
})();

output += '\n      </ul>\n  </div>\n</nav>\n';
    }
    catch(e) {
        var error = context.set_error(e, output);
        throw(error);
    }

    return output;
}

